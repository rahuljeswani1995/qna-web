{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/main-page/main-page.component.ts","webpack:///src/app/main-page/main-page.component.html","webpack:///src/app/resolvers/test-data.resolver.ts","webpack:///src/app/services/data.service.ts","webpack:///src/app/services/user-profile.service.ts","webpack:///src/app/test/test.component.ts","webpack:///src/app/test/test.component.html","webpack:///src/app/welcome/welcome.component.ts","webpack:///src/app/welcome/welcome.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///src/models/answer.model.ts","webpack:///src/models/question.model.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","serverData","AppRoutingModule","forRoot","imports","AppComponent","router","navigate","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","MainPageComponent","userSvc","tests","populateTests","JSON","parse","localStorage","getItem","getUserEmail","startNewTest","TestDataResolver","dataService","route","state","getData","providedIn","DataService","http","get","UserProfileService","userName","v","email","TestComponent","questionParaEl","document","getElementById","data","subscribe","res","questionsModel","transformIntoModel","questionsToDisplay","sections","filterOutSections","currentQuestion","rawData","questions","forEach","rawQn","idx","qn","serialNum","toString","answer_id","correct_answer_id","category","text","question_text","ans_options","answers","rawAns","answer","answer_text","chosen_percentage","push","options","Set","map","x","section","filter","questionId","find","q","ansId","userSelection","numAttempted","el","undefined","length","window","confirm","saveTestScore","navigateByUrl","totalQuestions","numCorrect","percentScore","date","Date","toLocaleDateString","toLocaleTimeString","toFixed","setItem","stringify","onSectionFilter","onSubmit","WelcomeComponent","name","isNameValid","isEmailValid","setUserName","setUserEmail","alert","value","onNameCommit","onEmailCommit","onLoginClick","environment","production","bootstrapModule","err","console","error","Answer","Question"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { WelcomeComponent } from './welcome/welcome.component';\nimport { AppComponent } from './app.component';\nimport { TestComponent } from './test/test.component';\nimport { TestDataResolver } from './resolvers/test-data.resolver';\nimport { MainPageComponent } from './main-page/main-page.component';\n\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: AppComponent\n  },\n  {\n    path: \"login\",\n    component: WelcomeComponent\n  },\n  {\n    path: \"main\",\n    component: MainPageComponent\n  },\n  {\n    path: \"test\",\n    component: TestComponent,\n    resolve: {serverData: TestDataResolver }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n  })\n  export class AppComponent implements OnInit {\n    constructor(private router: Router){}\n\n    ngOnInit(){\n        this.router.navigate([\"/login\"]);\n    }\n\n  }\n  ","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { WelcomeComponent } from './welcome/welcome.component';\nimport { AppComponent } from './app.component';\nimport { TestComponent } from './test/test.component';\nimport { MainPageComponent } from './main-page/main-page.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    WelcomeComponent,\n    TestComponent,\n    MainPageComponent,\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule,\n  ],\n  providers: [\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UserProfileService } from '../services/user-profile.service';\n\n@Component({\n  selector: 'app-main-page',\n  templateUrl: './main-page.component.html',\n  styleUrls: ['./main-page.component.css']\n})\nexport class MainPageComponent implements OnInit {\n  tests = [];\n  \n  constructor(private router: Router,\n    private userSvc: UserProfileService) { }\n\n  ngOnInit(): void {\n    this.populateTests();\n  }\n\n\n  // retrieve previous tests' data from the local storage\n  populateTests() {\n    this.tests = JSON.parse(localStorage.getItem(this.userSvc.getUserEmail()));\n\n  }\n\n  startNewTest(){\n    this.router.navigate([\"/test\"]);\n  }\n\n}\n","<div class=\"container\">\n    <h3>Home</h3>\n    <div id=test-history>\n        <h4>My Test History</h4>\n        <div class=\"alert alert-warning\" role=\"alert\" *ngIf=\"tests == null || tests == undefined || tests.length == 0\">\n            No records!\n        </div>\n\n        <div id=\"history-table\"class=\"table-responsive\" *ngIf=\"tests.length != 0\">\n            <table class=\"table text-black table-striped\">\n                <thead>\n                    <tr style=\"background-color: #518ba7;\">\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">Date</th>\n                        <th scope=\"col\">Correct Answers</th>\n                        <th scope=\"col\">Total Questions</th>\n                        <th scope=\"col\">Percentage Score</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let test of tests; index as i\">\n                        <td>{{i+1}}</td>\n                        <td>{{test.date}}</td>\n                        <td>\n                            {{test.numCorrect}}\n                        </td>\n                        <td>{{test.totalQns}}</td>\n                        <td>{{test.percent}}%</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n    <div id=\"new-test-button-div\">\n        <button id=\"btnNewTest\" class=\"btn btn-success btn-lg\" (click)=\"startNewTest()\" >Start New Test</button>\n    </div>\n\n</div>","import { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { DataService } from '../services/data.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TestDataResolver implements Resolve<any>{\n    constructor(private dataService: DataService){\n        \n    }\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        return this.dataService.getData();\n        \n\n        \n    }\n    \n}","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(private http: HttpClient) { }\n\n  getData(): Observable<any>{\n      // return this.http.get(\"http://lsatmaxadmin.us/interview/loadData.php\");\n      return this.http.get(\"http://cors-anywhere.herokuapp.com/lsatmaxadmin.us/interview/loadData.php\");\n  }\n}","import { Injectable } from \"@angular/core\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class UserProfileService{\n    private userName: string;\n    private email: string;\n\n    public getUserName(): string{\n        return this.userName;\n    }\n\n    public setUserName(v:string){\n        this.userName = v;\n    }\n\n    public getUserEmail(): string{\n        return this.email;\n    }\n\n    public setUserEmail(v:string){\n        this.email = v;\n    }\n}","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Question } from '../../models/question.model';\nimport { Answer } from 'src/models/answer.model';\nimport { UserProfileService } from '../services/user-profile.service';\n\n@Component({\n    selector: 'app-test',\n    templateUrl: './test.component.html',\n    styleUrls: ['./test.component.css']\n})\nexport class TestComponent implements OnInit {\n    serverData: any;\n    questionsModel: Question[];\n    questionsToDisplay: Question[];\n    sections: Set<string>;\n\n    currentQuestion: Question;\n    questionParaEl: any;\n\n    constructor(private route: ActivatedRoute,\n        private router: Router,\n        private userSvc: UserProfileService) { }\n\n    ngOnInit() {\n        this.questionParaEl = document.getElementById(\"question-para\");\n\n        this.route.data.subscribe(res => {\n            this.serverData = res.serverData;\n        });\n        this.questionsModel = this.transformIntoModel(this.serverData);\n\n        this.questionsToDisplay = this.questionsModel;\n\n        this.sections = this.filterOutSections(this.questionsModel);\n\n        this.currentQuestion = this.questionsToDisplay[0];\n\n    }\n\n    private transformIntoModel(rawData: any[]): Question[] {\n        const questions: Question[] = [];\n\n        rawData.forEach((rawQn: any, idx: number) => {\n            let qn: Question = new Question();\n            qn.serialNum = (idx+1).toString();\n            qn.id = rawQn.id;\n            qn.answer_id = rawQn.correct_answer_id;\n            qn.category = rawQn.category;\n            qn.text = rawQn.question_text;\n\n            let ans_options: Answer[] = [];\n            rawQn.answers.forEach((rawAns: any) => {\n                let answer: Answer = new Answer();\n                answer.id = rawAns.id;\n                answer.text = rawAns.answer_text;\n                answer.chosen_percentage = rawAns.chosen_percentage;\n                ans_options.push(answer);\n            });\n\n            qn.options = ans_options;\n\n            questions.push(qn);\n        });\n        return questions;\n    }\n\n    private filterOutSections(questions: Question[]) {\n        return new Set(questions.map(x => x.category));\n    }\n\n    onSectionFilter(section: string) {\n        if (section == \"all\")\n            this.questionsToDisplay = this.questionsModel;\n        else\n            this.questionsToDisplay = this.questionsModel.filter(qn => qn.category == section);\n\n        this.currentQuestion = this.questionsToDisplay[0];\n    }\n\n    onQuestionSelect(questionId: string) {\n        this.currentQuestion = this.questionsToDisplay.find(q => q.id === questionId);\n    }\n\n    onAnswerSelect(ansId: string) {\n        this.currentQuestion.userSelection = ansId;\n    }\n\n    onSubmit() {\n        let numAttempted: number = this.questionsModel.filter(el => el.userSelection != null && el.userSelection != undefined).length;\n        if (window.confirm(`You have attempted ${numAttempted} out of ${this.questionsModel.length} questions. Are you sure you want to submit?`)) {\n            // submit\n            // save score\n            this.saveTestScore();\n            this.router.navigateByUrl(\"/main\");\n            // route to home page\n        }\n    }\n\n    private saveTestScore() {\n        let totalQuestions: number = this.questionsModel.length;\n        let numCorrect: number = this.questionsModel.filter(el => el.userSelection !== null && el.userSelection === el.answer_id).length;\n        let percentScore: number = numCorrect / totalQuestions * 100;\n        let email:string = this.userSvc.getUserEmail();\n        let tests: any[] = JSON.parse(localStorage.getItem(email));\n        let date: Date = new Date();\n        tests.push({\n            \"date\": `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`,\n            \"totalQns\": totalQuestions,\n            \"numCorrect\": numCorrect,\n            \"percent\": percentScore.toFixed(2)\n        });\n\n        localStorage.setItem(email, JSON.stringify(tests));\n\n    }\n\n}\n","<div id=\"test-container\" class=\"container\">\n    <div id=\"content-div\">\n        <div id=\"dropdown-container\">\n            <!-- Dropdown for sections -->\n            <h4 style=\"display: inline-block; margin-right: 1em\">Category: </h4>\n            <select (change)=\"onSectionFilter($event.target.value)\">\n                <option selected value=\"all\">All</option>\n                <option *ngFor=\"let section of sections\" [value]=\"section\">{{section}}</option>\n            </select>\n        </div>\n\n        <div id=\"questions-container\" class=\"float-left col-lg-2 col-md-2\">\n            <div class=\"qDiv\"\n                [ngClass]=\"{'attempted-qn': question.userSelection != null, 'selected-qn' : currentQuestion.id == question.id }\"\n                (click)=\"onQuestionSelect(question.id)\" *ngFor=\"let question of questionsToDisplay\">\n                <label class=\"qLabel\">\n                    Q.{{question.serialNum}}\n                </label>\n            </div>\n        </div>\n\n        <!-- question detail -->\n        <div id=\"question-detail\" class=\"float-left col-lg-10 col-md-10\">\n            <h3>Q.{{currentQuestion.serialNum}}</h3>\n            <p id=\"question-para\" [innerHTML]=\"currentQuestion.text\"></p>\n\n            <div *ngFor=\"let option of currentQuestion.options\" class=\"form-check\">\n                <label class=\"form-check-label\">\n                    <input type=\"radio\" class=\"form-check-input\" name=\"optradio\" [value]=\"option.id\"\n                        [checked]=\"currentQuestion.userSelection===option.id\"\n                        (change)=\"onAnswerSelect($event.target.value)\">{{option.text}}\n                </label>\n            </div>\n        </div>\n\n        <div class=\"clear-left\"></div>\n    </div>\n    <div id=\"footer-div\">\n        <!-- Next and previous buttons -->\n        <button id=\"btnSubmit\" class=\"btn btn-success btn-lg\" (click)=\"onSubmit()\">Submit Test</button>\n    </div>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router } from \"@angular/router\";\nimport { UserProfileService } from \"../services/user-profile.service\";\n\n@Component({\n\tselector: 'app-welcome',\n\ttemplateUrl: './welcome.component.html',\n\tstyleUrls: ['./welcome.component.css']\n})\nexport class WelcomeComponent implements OnInit {\n\n\tconstructor(private userSvc: UserProfileService,\n\t\tprivate router: Router) { }\n\n\n\tname: string;\n\temail: string;\n\tisNameValid: boolean;\n\tisEmailValid: boolean;\n\n\tngOnInit(): void {\n\t\tthis.name = this.email = \"\";\n\t\tthis.isNameValid = this.isEmailValid = false;\n\t}\n\n\tonLoginClick() {\n\t\tif (this.isNameValid && this.isEmailValid) {\n\t\t\tthis.userSvc.setUserName(this.name);\n\t\t\tthis.userSvc.setUserEmail(this.email);\n\n\t\t\tif (localStorage.getItem(this.email) == null) {\n\t\t\t\tlocalStorage.setItem(this.email, JSON.stringify([]));\n\t\t\t}\n\n\t\t\tthis.router.navigate(['/main']);\n\t\t}\n\t\telse {\n\t\t\talert(\"Please enter your name and e-mail address.\");\n\t\t}\n\n\t}\n\n\tonNameCommit(value: string) {\n\t\tif (value != null && value != \"\") {\n\t\t\tthis.name = value;\n\t\t\tthis.isNameValid = true;\n\t\t}\n\t\telse {\n\t\t\tthis.name == \"\";\n\t\t\tthis.isNameValid = false;\n\t\t}\n\n\n\t}\n\n\tonEmailCommit(value: string) {\n\t\tif (value != null && value != \"\") {\n\t\t\tthis.email = value;\n\t\t\tthis.isEmailValid = true;\n\t\t}\n\t\telse {\n\t\t\tthis.email == \"\";\n\t\t\tthis.isEmailValid = false;\n\t\t}\n\t}\n}\n","<div class=\"container\">\n    <div class=\"col-lg-8 col-md-8 mx-auto\">\n        <div class=\"card rounded shadow\">\n            <div class=\"card-header\">\n                <h3 class=\"mb-0\">Login</h3>\n            </div>\n            <div class=\"card-body\">\n                <div class=\"form-group\">\n                    <label>Name</label>\n                    <input type=\"text\" [value]=\"name\" placeholder=\"Enter Name\"\n                        (blur)=\"onNameCommit($event.target.value)\" class=\"form-control form-control-lg\" id=\"uname\">\n                </div>\n                <div class=\"form-group\">\n                    <label>Email Address</label>\n                    <input type=\"text\" placeholder=\"Enter Email\" (blur)=\"onEmailCommit($event.target.value)\"\n                        class=\"form-control form-control-lg\" id=\"email\" [value]=\"email\">\n                </div>\n\n                <button type=\"submit\" class=\"btn btn-success btn-lg float-right\" (click)=\"onLoginClick()\" id=\"btnLogin\">Login</button>\n            </div>\n        </div>\n    </div>\n\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","export class Answer {\n    id: string;\n    chosen_percentage: string;\n    text: string;\n\n}","import { Answer } from './answer.model';\n\nexport class Question {\n    serialNum: string;\n    id: string;\n    answer_id: string;\n    category: string;\n    text: string;\n    options: Answer[];\n    userSelection: string;\n}"]}